9/26 - Need to go through all of the titleparser functionality and revise it so that it works for an array of strings, becuase that is what I will be passing into the function. I am note sure what I was passing in before, but it is not working. 

9/27 - titleParser functionality is now working as expected. At some point we will need to figure out a solution for how to deal with the lengths. Next step is sending the result of titleParser to the backend.

10/2 - sending titles successfully to the backend. Now it is time to start triggering some backend functionality. Question - do we want to have the functionality that writes the js that we can copy into the console done by the front end or the backend? 
Next step is setting up a download button for the xcel file. 


Todo - 
    Create display that shows the table data to the user 
    Create display that shows the user the code to copy to ER


11/6 - Accomplished: added conditional rendering that will check to see if the file length is more than zero and render the tables and the SessionCode. 

11/8 - in the next 20 minutes I will get some piece of the dataObject interacting with the ER code. 


11/2 - todo: 

    ☠️ Figure out how to pass state up from the table (edited text) back to the App.js. Then we will use this state object to actually create the estimate document

    ☠️ I have some code in a separate files called willThisWork.js - its straght from chatGPT. Will it actually work to extract data? 

    ☠️ make the UI display logically - don't show download button or code before user has requested that data be sent to server / locked in their changes.


The send to server button that is built into the table componenet will do the following: 
    overwrite the tableData state the editableData that we generated in the Table Component 
    trigger the old send data to server functionality that we were using previously to generate the sessionCode and the xcel document 

Update for 12.6.23
    We are now able to modify the tableData state after the user clicks the "send to server" button from the Table Component. 
    We need to make it so that clicking this also triggers the action of writing a new estimate - how can we handle the issue of overwriting the old data, etc? 
    
    next big step will be setting up multer to then extract the data from the first word document so that we can pull out the job #. 

    Because I am using named objects, I cannot modify the original ISCI. 


Notes from 12.11.23
    for some reason the frontend is making the fetch request twice? 
        Also, if its the frist time that the user has dragged in scripts, it will wait for user to press 'send to server' to make the fetch requests. However, if the user drags in the scripts again, it automatically send to the server.... why? 
    Lets see if we can get DNV and Job # values plugged into the estimate before the 9:30 call. 


Notes from 12.18.23
    Fixed issue where you couldnt edit the first ISCI from within the table 
    Next big lifts will be: 
        How can I get the job number into the Session report code? There is a large problem here because 
        we the session code (currenly is all generated on the frontend), but the job number is generated on 
        the backend. I think the best solve may be to have the entire session code generated on the backend.

        I'd like to be able to download a whole project file, already organized the way I like it. 

Notes from 12.20.23
    I'm going to try and make it so that we can feed in scripts and get out a folder with all the files organized how I like them. Eventually this will mean the scripts are in there too, but for now it'll just be the estimate

    Was able to get a file working that can create a zip of the template folder. 

Notes from 1.3.24
    Now that we have the zipper functionaity available, how can we add a filled out script to the file structure? 
    Let's get the writeNewEstimate to put the estimate into the correct folder 
    Now we'll go ahead and get the download button to trigger 
        1. the zipper function to create a zipped file
        2. write the new estimate to the template folder 
        3. serve that zipped file to the client as a download 

    Next thing I want to do is make it so that the prelim scripts (that the user dragged in) are added to the file strucure as well 

Notes from 1.4.24 
    Today's objective is to get the files that are uploaded from the client into the zTemplate file org
        some thoughts... we'll need a way to make it so that when the page is loaded / refreshed we'll stating from a blank slate as far 
        as the written files goes
    Update for 12pm - currently we are successfully uploading all of the files to the /temp folder. I wonder if I should use the .zipper to 
    add the files? That way I can clear out / delete temp and never have to mess with the zTemplate? 

    Successfully able to now download a zip with all of my scripts as well as my filled out estimate
    Now I would like to add in a sneaky little fetch request that triggers every time that the drop event happens that will 'clear the cache' or more accuratly/specifically: use fs to remove all old docx from the Prelim Scripts folder and remove the zip file from (whereever I end up storing it)

    Big next step - can I create a draft .eml that I can then open in to quickly send the estimate email to Alan? 

Notes from 1.5.24
    Today's objective - create make it so that every time a user drops in a file we make a fetch request. This request will go to a route on the server that 
        - checks the PrelimScripts folder - are there any docx or doc files? if so remove them. 
        - checks the .temp folder. are there any zip folders there? if so remove them 
    Step One: redo the destinations in zipper and download so that the zip file goes into temp. Done! 
    Step Two: create a route that is triggered every time that the user drops files and consoles 'dropped' on the backend

Notes from 1.8.24
    Noticed Bug that when i write the files back into the zTemplate, it does not recognize special characters like " ' " in '24. This is creating problems down the line. I need to figure out a way to remove them from the file names themselves maybe? 
    Appears the bug has been solved with an npm package. 

Notes from 1.9.24 
    What else do I want this to do? 

Notes from 1.10.24
    Let's fix the bug that is causing the estimate to have a : on the job number ✅
    Let's add some visual separation to the UI





    











